{"version":3,"file":"static/js/811.ececb50c.chunk.js","mappings":"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","sources":["components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetailsInfo.jsx","components/MovieDetails/OptionalInfo.jsx","Pages/MovieDetails.jsx","components/Api/Api.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\n\nimport styled from '@emotion/styled';\n\nexport const Section = styled.section`\n  padding: 15px;\n  margin: auto;\n  @media screen and (min-width: 320px) {\n    width: 320px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 1200px;\n  }\n`;\n\nexport const BtnBack = styled(Link)`\nfont-size: 14px;\n  display: inline-flex;\n  width: max-content;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n  padding: 5px;\n  margin-bottom: 15px;\n  box-shadow: 0px 0px 4px;\n  border-radius: 4px;\n  transition: 250ms;\n  &:hover,\n  &:focus {\n    color: white;\n`;\n\nexport const Box = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`;\nexport const InfoBox = styled.div`\n  padding: 15px;\n  color: white;\n`;\n\nexport const ListGenres = styled.ul`\n  display: flex;\n  list-style: none;\n  padding: 0;\n  gap: 10px;\n  margin: 0;\n`;\n\nexport const Poster = styled.img`\n  width: 290px;\n  object-fit: contain;\n`;\n\n// ---------OptionalInfo----------\n\nexport const OptionalInfoList = styled.ul`\n  border-top: 1px solid white;\n  border-bottom: 1px solid white;\n  padding: 15px;\n  display: flex;\n  margin: auto;\n  list-style: none;\n  width: 320px;\n  justify-content: space-evenly;\n  @media screen and (min-width: 320px) {\n    width: 320px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n  @media screen and (min-width: 1280px) {\n    width: 1200px;\n  }\n`;\n\nexport const OptionalInfoLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n    transition: 250ms;\n    &.active {\n        color: white;\n    }\n  &:hover,\n  &:focus {\n    color: grey;\n    &.active {\n         color: white;\n    }\n`;\n","import PropTypes from 'prop-types';\nimport {\n  BtnBack,\n  Box,\n  InfoBox,\n  ListGenres,\n  Section,\n  Poster,\n} from './MovieDetails.styled';\n\nexport const MovieDetailsInfo = ({\n  poster_path,\n  original_title,\n  overview,\n  genres,\n  year,\n  score,\n  pathname,\n  search,\n}) => {\n  return (\n    <>\n      <Section>\n        <BtnBack to={pathname + search}>Go back</BtnBack>\n        <Box>\n          <Poster\n            style={{ width: '290px' }}\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt=\"\"\n          ></Poster>\n          <InfoBox>\n            <h1>\n              {original_title}({year})\n            </h1>\n            <p>User Score: {score}%</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h3>Genres</h3>\n            <ListGenres>\n              {genres.map(({ name }) => (\n                <li key={name}>\n                  <p style={{ margin: '0' }}>{name}</p>\n                </li>\n              ))}\n            </ListGenres>\n          </InfoBox>\n        </Box>\n      </Section>\n    </>\n  );\n};\n\nMovieDetailsInfo.propTypes = {\n  poster_path: PropTypes.any,\n  original_title: PropTypes.any,\n  overview: PropTypes.any,\n  genres: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  year: PropTypes.any,\n  score: PropTypes.number.isRequired,\n  pathname: PropTypes.string.isRequired,\n  search: PropTypes.string.isRequired,\n};\n","import { OptionalInfoList, OptionalInfoLink } from './MovieDetails.styled';\nimport PropTypes from 'prop-types';\n\nexport const OptionalInfo = ({ locationState }) => {\n  return (\n    <OptionalInfoList>\n      <li>\n        <OptionalInfoLink state={locationState} to=\"cast\">\n          Cast\n        </OptionalInfoLink>\n      </li>\n      <li>\n        <OptionalInfoLink state={locationState} to=\"reviews\">\n          Reviews\n        </OptionalInfoLink>\n      </li>\n    </OptionalInfoList>\n  );\n};\n\nOptionalInfo.propTypes = {\n  locationState: PropTypes.object.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getDetailsApi } from 'components/Api/Api';\nimport { Outlet } from 'react-router-dom';\nimport { MovieDetailsInfo } from 'components/MovieDetails/MovieDetailsInfo';\nimport { OptionalInfo } from 'components/MovieDetails/OptionalInfo';\n\nconst MovieDetails = () => {\n  const { moviesId } = useParams();\n\n  const location = useLocation();\n  const search = location?.state?.from?.search || '';\n  const pathname = location?.state?.from?.pathname || '/';\n\n  const [details, setDetails] = useState({});\n  const [genres, setGenres] = useState([]);\n  const [year, setYear] = useState([]);\n\n  const onArrayItems = async () => {\n    const movieDetails = await getDetailsApi(moviesId);\n    setDetails(movieDetails);\n    const allGenres = await movieDetails.genres;\n    setGenres(allGenres);\n    const year = await movieDetails.release_date.slice(0, 4);\n    setYear(year);\n  };\n\n  useEffect(() => {\n    onArrayItems();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const score = Math.round(details.vote_average * 10);\n  return (\n    <>\n      <MovieDetailsInfo\n        poster_path={details.poster_path}\n        original_title={details.original_title}\n        overview={details.overview}\n        genres={genres}\n        year={year}\n        score={score}\n        pathname={pathname}\n        search={search}\n      />\n      <OptionalInfo locationState={location.state} />\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;","import axios from 'axios';\n\nexport const getTrandingsApi = async () => {\n  const { data } = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/week?api_key=6f552eb6929f0128999ddb3bd491ac60'\n  );\n  return data.results;\n};\n\nexport const getSearchMoviesApi = async name => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=6f552eb6929f0128999ddb3bd491ac60&language=en-US&query=${name}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nexport const getReviewsApi = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=6f552eb6929f0128999ddb3bd491ac60&language=en-US&page=1`\n  );\n  return data;\n};\n\nexport const getDetailsApi = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=6f552eb6929f0128999ddb3bd491ac60&language=en-US`\n  );\n  return data;\n};\n\nexport const getCastApi = async id => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=6f552eb6929f0128999ddb3bd491ac60&language=en-US`\n  );\n  return data;\n};\n"],"names":["Section","styled","BtnBack","Link","Box","InfoBox","ListGenres","Poster","OptionalInfoList","OptionalInfoLink","NavLink","MovieDetailsInfo","poster_path","original_title","overview","genres","year","score","pathname","search","to","style","width","src","alt","map","name","margin","OptionalInfo","locationState","state","moviesId","useParams","location","useLocation","from","useState","details","setDetails","setGenres","setYear","onArrayItems","getDetailsApi","movieDetails","allGenres","release_date","slice","useEffect","Math","round","vote_average","getTrandingsApi","axios","data","results","getSearchMoviesApi","getReviewsApi","id","getCastApi"],"sourceRoot":""}